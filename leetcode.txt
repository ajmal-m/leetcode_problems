977. Squres of a sorted array

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var sortedSquares = function(nums) {
    const result = new Array(nums.length);
    let left = 0;
    let right = nums.length-1;
    for(let i= nums.length-1 ; i>=0; i--){
        if(Math.abs(nums[right]) < Math.abs(nums[left])){
            result[i] = nums[left] ** 2
            left++;
        }else{
            result[i] = nums[right] ** 2;
            right--;
        }
    }
    return result
};


989. ADD TO ARRAY FORM OF INTEGER___________
 /**
 * @param {number[]} num
 * @param {number} k
 * @return {number[]}
 */
var addToArrayForm = function(num, k) {
    let n = num.length;
    let carry = 0;
    let i = n-1;
    let result = []
    while( carry >  0 || k > 0 || i >=0){
        let digit = i >=0 ? num[i] : 0;
        let sum = digit + k % 10  + carry;
        result.unshift(sum % 10)
        carry = parseInt(sum / 10)
        k = parseInt(k/10)
        i--;
    }
    
    return result
};

1005. Maximize Sum Of Array After K Negations
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var largestSumAfterKNegations = function(nums, k) {
    nums.sort((a,b) => (a-b) );
    for(let i=0; i< nums.length && k > 0 ; i++){
      if(nums[i] < 0){
        nums[i] *= -1;
        k--;
      }
    }
    if(k % 2=== 1){
      nums.sort((a, b) => (a-b));
      nums[0] *= -1;
    }
    let sum =0;
    nums.forEach((item) => { sum += item})
    return sum
};


Code

Testcase

1009. Complement of Base 10 Integer


Code

Testcase
Testcase
Result

1013. Partition Array Into Three Parts With Equal Sum

var canThreePartsEqualSum = function(arr) {
    let sum = 0;
    arr.forEach((item) => { sum += item });
    if(sum % 3 !== 0){
        return false
    }
    let n = sum/3;
    let count = 0;
    let countTime = 0;
    for(let item of arr){

        count += item;
        if(count === n){
            count = 0;
            countTime += 1
        }
    }
    return countTime >= 3;
};

1018. Binary Prefix Divisible By 5

1021. Remove Outermost Parentheses
var removeOuterParentheses = function(s) {
    let res = "";
    let balance = 0;
    for(let item of s){
        if(item === '('){
            if(balance > 0){
                res += item
            }
            balance++;
        }else{
            balance--;
            if(balance > 0){
                res += item
            }
        }
    }
    return res
};

1122. Relative Sort Array


/**
 * @param {number[]} arr1
 * @param {number[]} arr2
 * @return {number[]}
 */
var relativeSortArray = function(arr1, arr2) {
    let hash = {};
    for(let i=0; i< arr2.length; i++){
        hash[arr2[i]] = i;
    }
    arr1.sort((a, b) => {
        let indexA = a in hash ? hash[a] : arr2.length+a;
        let indexB = b in hash ? hash[b] : arr2.length+b;
        return indexA-indexB
    })
    return arr1
};


Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].


var numEquivDominoPairs = function (dominoes) {
    let hash = {};
    let result = 0;
    for (let domino of dominoes) {
        let sortedDomino = domino.sort((a, b) => (a - b));
        if (sortedDomino in hash) {
            result += hash[sortedDomino]
            hash[sortedDomino] += 1;
        } else {
            hash[sortedDomino] = 1;
        }
    }
    return result
};



MA REPEATING SUB STRING


/**
 * @param {string} sequence
 * @param {string} word
 * @return {number}
 */
var maxRepeating = function(sequence, word) {
    let k = Math.floor(sequence.length/word.length);
    while(k > 0){
        let repeatWord = "";
        for(let i=0; i<k; i++){
            repeatWord += word
        }
        if(isSubString(sequence, repeatWord)){
            return k
        }
        k--;
    }
    return 0
};

var isSubString = function(seq, sub){
    for(let i=0; i<= seq.length-sub.length; i++){
        let status = true;
        for(let j=0; j< sub.length; j++){
            if(seq[i+j] !== sub[j]){
                status = false;
                break
            }
        }
        if(status){
            return true
        }
    }
    return false
}


NUMBER OF STUDENTS UNABLE TO EAT

/**
 * @param {number[]} students
 * @param {number[]} sandwiches
 * @return {number}
 */
var countStudents = function(students, sandwiches) {
    const circularStudents = students.filter((student) => (student === 0));
    const squareStudents = students.filter((student) => (student === 1));
    for(let i=0; i < sandwiches.length; i++){
        if(sandwiches[i] === 0 && circularStudents.length > 0){
            circularStudents.shift()
        }else if(sandwiches[i] === 1 && squareStudents.length > 0){
            squareStudents.shift()
        }else{
            break
        }
    }
    return circularStudents.length + squareStudents.length
};


MAXIMUM UNIT ON THE TRUCK

/**
 * @param {number[][]} boxTypes
 * @param {number} truckSize
 * @return {number}
 */
var maximumUnits = function(boxTypes, truckSize) {
    boxTypes.sort((a, b) => (b[1] - a[1]));
    let balanceSize = truckSize;
    let maxUnits = 0;
    for(let i=0; i< boxTypes.length; i++){
        let addSize = Math.min(balanceSize, boxTypes[i][0]);
        maxUnits += addSize * boxTypes[i][1];
        balanceSize -= addSize;
        if(balanceSize === 0){
            break
        }
    }
    return maxUnits
};
CALCULATE MONEY IN LEETCODE BANK

/**
 * @param {number} n
 * @return {number}
 */
var totalMoney = function(n) {
    let investMoney = 1;
    let totalInvest = 0;
    let increment = 0;
    for(let i=1; i<=n; i++){
        if(i % 7 === 0){
            totalInvest += increment + investMoney;
            investMoney+=1;
            increment = 0;
        }else{
            totalInvest += investMoney+increment;
            increment++
        }
    }
    return totalInvest
};

XOR
There is a hidden integer array arr that consists of n non-negative integers.

It was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1]. For example, if arr = [1,0,2,1], then encoded = [1,2,3].

You are given the encoded array. You are also given an integer first, that is the first element of arr, i.e. arr[0].

Return the original array arr. It can be proved that the answer exists and is unique.

var decode = function (encoded, first) {
    let arr = new Array(encoded.length + 1);
    let n = encoded.length;
    arr[0] = first;
    for (let i = 0; i < n; i++) {
        arr[i + 1] = arr[i] ^ encoded[i]
    }
    return arr
}


RECTANGLES CAN FORM MA SQUARES AREA MAIMUM


/**
 * @param {number[][]} rectangles
 * @return {number}
 */
var countGoodRectangles = function(rectangles) {
    let count = 0;
    let maxSide = 0;
    for(let i= 0; i< rectangles.length; i++){
        let [len, width] = rectangles[i];
        let side = Math.min(len, width);
        if(side > maxSide){
            maxSide = side;
            count = 1;
        }else if(side === maxSide){
            count++
        }
    }
    return count
};

1763. Longest Nice Substring

var longestNiceSubstring = function(s) {
    let a = 'a'.charCodeAt(0), A = 'A'.charCodeAt(0);
    var maxset, has, ones, twos;
    var i, l, c;
    let maxlen = 0, maxstr="";
    
    for( l=0; l<s.length; l++ ) { // shiftable left pointer

        has = new Array(26).fill(0);
        ones = twos = 0;
        maxset = false;
        for( i=l; i<s.length; i++ ) { // find longest working trace in this sector
            c = s.charCodeAt(i);

            if( c >= a ) { // found lowercase
                if( has[c-a] == 0 ) {
                    has[c-a] = 1;
                    ones++;
                } else if( has[c-a] == 2 ) {
                    has[c-a] = 3;
                    twos--;
                }
            } else {
                if( has[c-A] == 0 ) {
                    has[c-A] = 2;
                    twos++;
                } else if( has[c-A] == 1 ) {
                    has[c-A] = 3;
                    ones--;
                }
            }

            if( ones == 0 && twos == 0 ) {
                if( i+1-l > maxlen ) {
                    maxlen = i+1-l;
                    maxset = true;
                }
            }
        }
        
        if( maxset )
            maxstr = s.substr(l,maxlen);
    }
    
    return maxstr;
};


MAIMUM YEAR POPULTAION

/**
 * @param {number[][]} logs
 * @return {number}
 */
var maximumPopulation = function(logs) {
    let year = new Array(100).fill(0);
    let maxPopulation = 0;
    let maxYear = 0;
    for(let i=0; i< logs.length; i++){
        const [birth, died] = logs[i];
        year[birth-1950]++;
        year[died-1950]--;
    }
    let currentPopulation = 0;
    for(let i=0; i< year.length; i++){
        currentPopulation += year[i];
        if(currentPopulation > maxPopulation){
            maxPopulation = currentPopulation;
            maxYear = i+1950;
        }
    }
    return maxYear
};


1863. Sum of All Subset XOR Totals
