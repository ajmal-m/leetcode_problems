977. Squres of a sorted array

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var sortedSquares = function(nums) {
    const result = new Array(nums.length);
    let left = 0;
    let right = nums.length-1;
    for(let i= nums.length-1 ; i>=0; i--){
        if(Math.abs(nums[right]) < Math.abs(nums[left])){
            result[i] = nums[left] ** 2
            left++;
        }else{
            result[i] = nums[right] ** 2;
            right--;
        }
    }
    return result
};


989. ADD TO ARRAY FORM OF INTEGER___________
 /**
 * @param {number[]} num
 * @param {number} k
 * @return {number[]}
 */
var addToArrayForm = function(num, k) {
    let n = num.length;
    let carry = 0;
    let i = n-1;
    let result = []
    while( carry >  0 || k > 0 || i >=0){
        let digit = i >=0 ? num[i] : 0;
        let sum = digit + k % 10  + carry;
        result.unshift(sum % 10)
        carry = parseInt(sum / 10)
        k = parseInt(k/10)
        i--;
    }
    
    return result
};

1005. Maximize Sum Of Array After K Negations
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var largestSumAfterKNegations = function(nums, k) {
    nums.sort((a,b) => (a-b) );
    for(let i=0; i< nums.length && k > 0 ; i++){
      if(nums[i] < 0){
        nums[i] *= -1;
        k--;
      }
    }
    if(k % 2=== 1){
      nums.sort((a, b) => (a-b));
      nums[0] *= -1;
    }
    let sum =0;
    nums.forEach((item) => { sum += item})
    return sum
};


Code

Testcase

1009. Complement of Base 10 Integer


Code

Testcase
Testcase
Result

1013. Partition Array Into Three Parts With Equal Sum

var canThreePartsEqualSum = function(arr) {
    let sum = 0;
    arr.forEach((item) => { sum += item });
    if(sum % 3 !== 0){
        return false
    }
    let n = sum/3;
    let count = 0;
    let countTime = 0;
    for(let item of arr){

        count += item;
        if(count === n){
            count = 0;
            countTime += 1
        }
    }
    return countTime >= 3;
};

1018. Binary Prefix Divisible By 5

1021. Remove Outermost Parentheses
var removeOuterParentheses = function(s) {
    let res = "";
    let balance = 0;
    for(let item of s){
        if(item === '('){
            if(balance > 0){
                res += item
            }
            balance++;
        }else{
            balance--;
            if(balance > 0){
                res += item
            }
        }
    }
    return res
};

1122. Relative Sort Array


/**
 * @param {number[]} arr1
 * @param {number[]} arr2
 * @return {number[]}
 */
var relativeSortArray = function(arr1, arr2) {
    let hash = {};
    for(let i=0; i< arr2.length; i++){
        hash[arr2[i]] = i;
    }
    arr1.sort((a, b) => {
        let indexA = a in hash ? hash[a] : arr2.length+a;
        let indexB = b in hash ? hash[b] : arr2.length+b;
        return indexA-indexB
    })
    return arr1
};